/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WebhookService } from "../webhook.service";
import { WebhookCreateInput } from "./WebhookCreateInput";
import { WebhookWhereInput } from "./WebhookWhereInput";
import { WebhookWhereUniqueInput } from "./WebhookWhereUniqueInput";
import { WebhookFindManyArgs } from "./WebhookFindManyArgs";
import { WebhookUpdateInput } from "./WebhookUpdateInput";
import { Webhook } from "./Webhook";

export class WebhookControllerBase {
  constructor(protected readonly service: WebhookService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Webhook })
  async create(@common.Body() data: WebhookCreateInput): Promise<Webhook> {
    return await this.service.create({
      data: {
        ...data,

        app: data.app
          ? {
              connect: data.app,
            }
          : undefined,

        eventType: data.eventType
          ? {
              connect: data.eventType,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        active: true,

        app: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        eventTriggers: true,

        eventType: {
          select: {
            id: true,
          },
        },

        id: true,
        payloadTemplate: true,
        secret: true,
        subscriberUrl: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Webhook] })
  @ApiNestedQuery(WebhookFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Webhook[]> {
    const args = plainToClass(WebhookFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        active: true,

        app: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        eventTriggers: true,

        eventType: {
          select: {
            id: true,
          },
        },

        id: true,
        payloadTemplate: true,
        secret: true,
        subscriberUrl: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Webhook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: WebhookWhereUniqueInput
  ): Promise<Webhook | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        active: true,

        app: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        eventTriggers: true,

        eventType: {
          select: {
            id: true,
          },
        },

        id: true,
        payloadTemplate: true,
        secret: true,
        subscriberUrl: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Webhook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: WebhookWhereUniqueInput,
    @common.Body() data: WebhookUpdateInput
  ): Promise<Webhook | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          app: data.app
            ? {
                connect: data.app,
              }
            : undefined,

          eventType: data.eventType
            ? {
                connect: data.eventType,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          active: true,

          app: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          eventTriggers: true,

          eventType: {
            select: {
              id: true,
            },
          },

          id: true,
          payloadTemplate: true,
          secret: true,
          subscriberUrl: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Webhook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: WebhookWhereUniqueInput
  ): Promise<Webhook | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          active: true,

          app: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          eventTriggers: true,

          eventType: {
            select: {
              id: true,
            },
          },

          id: true,
          payloadTemplate: true,
          secret: true,
          subscriberUrl: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
