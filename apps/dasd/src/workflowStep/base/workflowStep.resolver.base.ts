/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateWorkflowStepArgs } from "./CreateWorkflowStepArgs";
import { UpdateWorkflowStepArgs } from "./UpdateWorkflowStepArgs";
import { DeleteWorkflowStepArgs } from "./DeleteWorkflowStepArgs";
import { WorkflowStepCountArgs } from "./WorkflowStepCountArgs";
import { WorkflowStepFindManyArgs } from "./WorkflowStepFindManyArgs";
import { WorkflowStepFindUniqueArgs } from "./WorkflowStepFindUniqueArgs";
import { WorkflowStep } from "./WorkflowStep";
import { WorkflowReminderFindManyArgs } from "../../workflowReminder/base/WorkflowReminderFindManyArgs";
import { WorkflowReminder } from "../../workflowReminder/base/WorkflowReminder";
import { Workflow } from "../../workflow/base/Workflow";
import { WorkflowStepService } from "../workflowStep.service";
@graphql.Resolver(() => WorkflowStep)
export class WorkflowStepResolverBase {
  constructor(protected readonly service: WorkflowStepService) {}

  async _workflowStepsMeta(
    @graphql.Args() args: WorkflowStepCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WorkflowStep])
  async workflowSteps(
    @graphql.Args() args: WorkflowStepFindManyArgs
  ): Promise<WorkflowStep[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => WorkflowStep, { nullable: true })
  async workflowStep(
    @graphql.Args() args: WorkflowStepFindUniqueArgs
  ): Promise<WorkflowStep | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WorkflowStep)
  async createWorkflowStep(
    @graphql.Args() args: CreateWorkflowStepArgs
  ): Promise<WorkflowStep> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        workflow: {
          connect: args.data.workflow,
        },
      },
    });
  }

  @graphql.Mutation(() => WorkflowStep)
  async updateWorkflowStep(
    @graphql.Args() args: UpdateWorkflowStepArgs
  ): Promise<WorkflowStep | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          workflow: {
            connect: args.data.workflow,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WorkflowStep)
  async deleteWorkflowStep(
    @graphql.Args() args: DeleteWorkflowStepArgs
  ): Promise<WorkflowStep | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [WorkflowReminder], { name: "workflowReminders" })
  async resolveFieldWorkflowReminders(
    @graphql.Parent() parent: WorkflowStep,
    @graphql.Args() args: WorkflowReminderFindManyArgs
  ): Promise<WorkflowReminder[]> {
    const results = await this.service.findWorkflowReminders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Workflow, {
    nullable: true,
    name: "workflow",
  })
  async resolveFieldWorkflow(
    @graphql.Parent() parent: WorkflowStep
  ): Promise<Workflow | null> {
    const result = await this.service.getWorkflow(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
