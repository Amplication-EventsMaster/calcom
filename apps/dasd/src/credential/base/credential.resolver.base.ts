/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateCredentialArgs } from "./CreateCredentialArgs";
import { UpdateCredentialArgs } from "./UpdateCredentialArgs";
import { DeleteCredentialArgs } from "./DeleteCredentialArgs";
import { CredentialCountArgs } from "./CredentialCountArgs";
import { CredentialFindManyArgs } from "./CredentialFindManyArgs";
import { CredentialFindUniqueArgs } from "./CredentialFindUniqueArgs";
import { Credential } from "./Credential";
import { DestinationCalendarFindManyArgs } from "../../destinationCalendar/base/DestinationCalendarFindManyArgs";
import { DestinationCalendar } from "../../destinationCalendar/base/DestinationCalendar";
import { App } from "../../app/base/App";
import { User } from "../../user/base/User";
import { CredentialService } from "../credential.service";
@graphql.Resolver(() => Credential)
export class CredentialResolverBase {
  constructor(protected readonly service: CredentialService) {}

  async _credentialsMeta(
    @graphql.Args() args: CredentialCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Credential])
  async credentials(
    @graphql.Args() args: CredentialFindManyArgs
  ): Promise<Credential[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Credential, { nullable: true })
  async credential(
    @graphql.Args() args: CredentialFindUniqueArgs
  ): Promise<Credential | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Credential)
  async createCredential(
    @graphql.Args() args: CreateCredentialArgs
  ): Promise<Credential> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        app: args.data.app
          ? {
              connect: args.data.app,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Credential)
  async updateCredential(
    @graphql.Args() args: UpdateCredentialArgs
  ): Promise<Credential | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          app: args.data.app
            ? {
                connect: args.data.app,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Credential)
  async deleteCredential(
    @graphql.Args() args: DeleteCredentialArgs
  ): Promise<Credential | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [DestinationCalendar], {
    name: "destinationCalendars",
  })
  async resolveFieldDestinationCalendars(
    @graphql.Parent() parent: Credential,
    @graphql.Args() args: DestinationCalendarFindManyArgs
  ): Promise<DestinationCalendar[]> {
    const results = await this.service.findDestinationCalendars(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => App, {
    nullable: true,
    name: "app",
  })
  async resolveFieldApp(
    @graphql.Parent() parent: Credential
  ): Promise<App | null> {
    const result = await this.service.getApp(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: Credential
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
