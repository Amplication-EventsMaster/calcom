/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateSelectedCalendarArgs } from "./CreateSelectedCalendarArgs";
import { UpdateSelectedCalendarArgs } from "./UpdateSelectedCalendarArgs";
import { DeleteSelectedCalendarArgs } from "./DeleteSelectedCalendarArgs";
import { SelectedCalendarCountArgs } from "./SelectedCalendarCountArgs";
import { SelectedCalendarFindManyArgs } from "./SelectedCalendarFindManyArgs";
import { SelectedCalendarFindUniqueArgs } from "./SelectedCalendarFindUniqueArgs";
import { SelectedCalendar } from "./SelectedCalendar";
import { User } from "../../user/base/User";
import { SelectedCalendarService } from "../selectedCalendar.service";
@graphql.Resolver(() => SelectedCalendar)
export class SelectedCalendarResolverBase {
  constructor(protected readonly service: SelectedCalendarService) {}

  async _selectedCalendarsMeta(
    @graphql.Args() args: SelectedCalendarCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SelectedCalendar])
  async selectedCalendars(
    @graphql.Args() args: SelectedCalendarFindManyArgs
  ): Promise<SelectedCalendar[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => SelectedCalendar, { nullable: true })
  async selectedCalendar(
    @graphql.Args() args: SelectedCalendarFindUniqueArgs
  ): Promise<SelectedCalendar | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SelectedCalendar)
  async createSelectedCalendar(
    @graphql.Args() args: CreateSelectedCalendarArgs
  ): Promise<SelectedCalendar> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @graphql.Mutation(() => SelectedCalendar)
  async updateSelectedCalendar(
    @graphql.Args() args: UpdateSelectedCalendarArgs
  ): Promise<SelectedCalendar | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SelectedCalendar)
  async deleteSelectedCalendar(
    @graphql.Args() args: DeleteSelectedCalendarArgs
  ): Promise<SelectedCalendar | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: SelectedCalendar
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
